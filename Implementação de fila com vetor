#define MAX 100

typedef struct queue Fila;

struct queue
{
    int itens[MAX];
    int front, rear;
};

int empty(Fila *pq)
{
    if(pq->front == pq->rear)
    {
        return 1;
    }
    return 0;
}

void enqueue(Fila *pq, int x)
{
    /* Inversão das posições dos ponteiros. Se o inal do vetor já foi
     alcançado, então retorna-se ao início do vetor */

    if (pq ->rear == MAX-1)
    {
        pq->rear =0;
    }
    else
    {
        pq->rear++;
    }
    if (pq->rear == pq->front)
    {
        printf("\nEstouro da fila");
        exit(1);
    }
    pq->itens[pq->rear] = x;
    return;
}

int size (Fila *pq)
{
    /* se o final da fila ainda não alcançou o inal do vetor... */
    if(pq->front <= pq->rear)
    {
        return pq->rear -pq->front; //então o tamanho da fila é o final da fila menos o início da ila...

    }
    return pq->rear + pq->front;
}

int front(Fila *pq)
{
    return pq->itens[pq->front+1];
}

int dequeue(Fila* pq)
{
    int x, i;

    if(empty(pq))
    {
        printf("\nFila vazia");
        exit(1);
    }
    /* Inversão das posições dos ponteiros. Se o final do vetor já foi alcançado,
    então retorna-se ao início do vetor */

    if (pq->front == MAX-1)
    {
        pq->front = 0;
    }
    else
    {
        pq->front++;
    }
    return (pq->itens[pq->front]);
}

void imprimir (Fila *pq)
{
    int i;
    printf("\n\n----Fila atual----\n");

    for(i = pq->front; i <= pq->rear; i++)
    {
        if(i== pq->front)
            printf("Inicio[%d], ", pq->itens[i]);
        else if(i == pq->rear)
            printf("Fim[%d]", pq->itens[i]);
        else
            printf("%d, ",pq->itens[i]);
    }
    if(pq->front == (pq->rear + 1))
		printf("Fila vazia\n");

    printf("\n--------------\n");
}

int main()
{
    Fila fil;
    fil.front = -1;
    fil.rear  = -1;

    int parada = 0, op, num;

    while(parada == 0)
    {
        printf("\nESCOLHA UMA OPÇAO:\n");
        printf("\n1- Insere itens na Fila");
        printf("\n2- Retira itens na Fila");
        printf("\n3- Tamanho da Fila");
        printf("\n4- Retorna o próximo item da Fila sem retirar o mesmo da Fila");
        printf("\n5- Sair");

        printf("\n\nOpcao: ");
        scanf("%d", &op);

        switch(op)
        {
            case 1:
                printf("\nOpcao: 1- Insere itens na Fila ");

                num = rand()%100;
                printf("\nDigete o elemento: %d", num);

                enqueue(&fil, num);

                printf("\n\n");
                system("pause");
                system("cls");
            break;

            case 2:
                printf("\nOpcao: 2- Retira itens na Fila");

                printf("\nTirando da Fila %d", dequeue(&fil));

                printf("\n\n");
                system("pause");
                system("cls");
            break;

            case 3:
                printf("\nOpcao: 3- Tamanho da Fila");

                printf("\n Tamanho da Fila %d",size(&fil));

                //imprimir (&fil);

                printf("\n\n");
                system("pause");
                system("cls");
            break;

            case 4:
                printf("\nOpcao: 4- Retorna o próximo item da Fila sem retirar o mesmo da Fila");

                printf("\nProximo da fila %d", front(&fil));

                printf("\n\n");
                system("pause");
                system("cls");
            break;

            case 5:
                printf("\nOpcao: 5- Sair");

                parada = 1;

                printf("\n\n");
                system("pause");
                system("cls");
            break;
        }
    }

    return 0;
}
